****************************************************
无模式对话框架构程序的执行过程
****************************************************
AFX_MODULE_STATE aaa;//当前程序模块状态信息
AFX_MODULE_THREAD_STATE bbb; //当前程序线程状态信息

CWinApp::CWinApp()//构造全局对象CMyWinApp theApp
{
  AFX_MODULE_STATE* pModuleState = AfxGetModuleState();
               //获取全局变量&aaa
  AFX_MODULE_THREAD_STATE* pThreadState = pModuleState->m_thread;
               //获取全局变量&bbb
  pThreadState->m_pCurrentWinThread = this;//将&theApp保存到bbb的一个成员中
  
  AfxGetThread()
  {
     AFX_MODULE_THREAD_STATE* pState = AfxGetModuleThreadState();//获取&bbb
     CWinThread* pThread = pState->m_pCurrentWinThread;
     return pThread;//返回的为&theApp
  }
  pModuleState->m_pCurrentWinApp = this;//将&theApp保存到aaa的一个成员中
  AfxGetApp()
  {
    return AfxGetModuleState()->m_pCurrentWinApp；//返回&theApp
  }
}
进入入口函数
WinMain(...)
{
  AfxWinMain(..)
  {
    CWinThread* pThread = AfxGetThread();
    CWinApp* pApp = AfxGetApp();//获取&theApp
    pApp->InitApplication();//利用theApp调用应用程序类的成员 虚函数（初始化）
    pThread->InitInstance()//利用theApp调用应用程序类的成员 虚函数（创建并显示无模式对话框）
    {
      CMyDlg* pdlg = new CMyDlg;
      pdlg->Create( IDD_DIALOG1 )//函数内部this为pdlg（自己new的对话框类对象地址）
      {
        CDialog::Create(MAKEINTRESOURCE(IDD_DIALOG1), ..)//函数内部this为pdlg
        {
          HRSRC hResource = ::FindResource(hInst, lpszTemplateName, RT_DIALOG);
	  HGLOBAL hTemplate = LoadResource(hInst, hResource);
                     //以上两行代码，查找并加载对话框资源
          CreateIndirect(MAKEINTRESOURCE(IDD_DIALOG1), ...)
          {
            LPCDLGTEMPLATE lpDialogTemplate = LockResource(hDialogTemplate);
            CreateIndirect(lpDialogTemplate..)
            {
              CreateDlgIndirect（...）
              {
                ::CreateDialogIndirect（...）;//以间接方式创建无模式对话框
              }
            }
          }

        }
      }
    }
    pThread->Run()//函数内部this为&theApp
    {
      CWinThread::Run()//函数内部this为&theApp
      {
        for (;;)
        {
          while(没有消息时)
          {
            OnIdle(..);//空闲处理（虚函数）
          }
          do
          {
            if(::GetMessage抓到WM_QUIT消息)
               return ExitInstance(..);//善后处理（虚函数） 
          }while(...)
        }
      }
    }
  }
}
******************************
父类，处理点击OK按钮发出的WM_COMMAND消息
******************************
CDialog::OnOK()
{
  EndDialog(IDOK)
  {
    ::EndDialog(m_hWnd, nResult);//只能将无模式对话框隐藏
  }
}